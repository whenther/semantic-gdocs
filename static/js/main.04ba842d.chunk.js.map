{"version":3,"sources":["lib/theme.ts","Docs.tsx","Nav.tsx","Footer.tsx","lib/html-cleaner.ts","Dropzone.tsx","Inputs.tsx","Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","extendTheme","config","initialColorMode","useSystemColorMode","styles","global","html","height","body","Docs","align","spacing","as","size","pt","Nav","useColorMode","colorMode","toggleColorMode","paddingY","background","maxW","justify","color","icon","Sun","Moon","aria-label","onClick","Footer","href","isExternal","STYLE_REGEX","EMPTY_P_REGEX","EMPTY_DIV_REGEX","BR_REGEX","cleaner","inputText","$iframe","$","styleTags","$input","wrapElementWithStyle","$element","property","style","wrapper","css","wrap","getOutputText","withLineBreaks","output","replace","removeLineBreaks","cleanHtmlOutput","processInput","input","pullStyleTagsIntoDom","stripHeadTag","putInputOntoDom","makeElementsSemantic","cleanUp","document","append","this","contents","find","remove","match","forEach","tag","$tag","each","index","element","makeElementSemantic","removeAttr","html_beautify","DropButton","children","whenDragging","noDrag","noClick","onChange","props","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onload","result","readAsText","useDropzone","maxFiles","accept","getRootProps","getInputProps","isDragActive","Inputs","useState","setInput","setOutput","setRemoveLineBreaks","outputRef","useRef","toast","useToast","useEffect","newOutput","handleChange","event","target","name","value","pb","colorScheme","variant","isFullWidth","templateColumns","gap","disabled","InputTextArea","placeholder","label","hasArrow","placement","tabIndex","isChecked","checked","copyElement","current","title","description","status","duration","isClosable","ref","InputHeading","forwardRef","minHeight","fontFamily","fontSize","SmallButton","textarea","select","setSelectionRange","execCommand","Layout","direction","className","flex","overflow","display","flexDirection","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.04ba842d.chunk.js","sourcesContent":["import { extendTheme, Theme } from \"@chakra-ui/react\";\n\nconst config: Partial<Theme> = {\n  config: {\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n  },\n  styles: {\n    global: {\n      html: {\n        height: \"100%\",\n      },\n      body: {\n        height: \"100%\",\n      },\n      \"#root\": {\n        height: \"100%\",\n      },\n    },\n  },\n};\n\nexport const theme = extendTheme(config);\n","import React from \"react\";\nimport { Box, Code, Heading, Text, VStack } from \"@chakra-ui/react\";\n\nexport const Docs: React.FC = () => {\n  return (\n    <Box>\n      <VStack align=\"stretch\" spacing={3}>\n        <Heading as=\"h2\" size=\"lg\" pt={4}>\n          Convert exported Google Docs HTML to clean, semantic HTML\n        </Heading>\n\n        <Text>\n          Google Docs can export a document as HTML. But if you want to import\n          that HTML somewhere else, you'll have problems. This cleans up the\n          Google Docs export, and gives you clean, semantic HTML that you can\n          import into a rich text editor.\n        </Text>\n\n        <Text>\n          In Google Docs, go to{\" \"}\n          <Code>\n            File {\">\"} Download As {\">\"} Webpage\n          </Code>\n          . Then make sure to un-zip the downloaded zip file. Next, just grab\n          the HTML file, drag it into this site, and drop it on the big button.\n          The <Text as=\"strong\"> Clean Output </Text> box should now show your\n          cleaned-up HTML code! Just click the copy button to put it in your\n          clipboard. That's all there is to it! Note that you may see some funny\n          characters - but it should render fine.\n        </Text>\n\n        <Text>\n          If you want to copy/paste in HTML, that works too! Just make sure to\n          get everything, especially the <Code>{\"<head>\"}</Code> tag, then paste\n          it all in the\n          <Text as=\"strong\"> Import </Text>\n          box.\n        </Text>\n      </VStack>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport {\n  Container,\n  Box,\n  IconButton,\n  Flex,\n  useColorMode,\n  Heading,\n} from \"@chakra-ui/react\";\n\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\n\nexport const Nav: React.FC = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <Box as=\"nav\" paddingY={3} background=\"purple.800\">\n      <Container maxW=\"container.xl\">\n        <Flex justify=\"space-between\" align=\"center\">\n          <Heading size=\"sm\" color=\"white\">\n            Google Docs HTML Cleaner\n          </Heading>\n\n          <IconButton\n            icon={colorMode === \"light\" ? <SunIcon /> : <MoonIcon />}\n            aria-label={colorMode === \"light\" ? \"Light Mode\" : \"Dark Mode\"}\n            onClick={() => toggleColorMode()}\n          />\n        </Flex>\n      </Container>\n    </Box>\n  );\n};\n","import React from \"react\";\nimport { Container, Flex, Link, Box } from \"@chakra-ui/react\";\n\nexport const Footer: React.FC = () => {\n  return (\n    <Box as=\"footer\" paddingY={3} background=\"purple.800\" color=\"white\">\n      <Container maxW=\"container.xl\">\n        <Flex justify=\"space-between\" align=\"center\">\n          <Link href=\"https://twitter.com/WowItsWillWow\" isExternal>\n            Made by Will Ockelmann-Wagner\n          </Link>\n\n          <Link\n            href=\"https://github.com/will-wow/semantic-gdocs/issues\"\n            isExternal\n          >\n            Issues?\n          </Link>\n        </Flex>\n      </Container>\n    </Box>\n  );\n};\n","import $ from \"jquery\";\nimport { html_beautify } from \"js-beautify\";\n\nconst STYLE_REGEX = /<style[^>]*>.*<\\/style>/g;\nconst EMPTY_P_REGEX = /<p><\\/p>/g;\nconst EMPTY_DIV_REGEX = /<div><\\/div>/g;\nconst BR_REGEX = /<br\\s*\\/?>/g;\n\nexport class HtmlCleaner {\n  inputText: string = \"\";\n  $iframe: JQuery<HTMLIFrameElement> = $(\n    '<iframe id=\"input-zone\" style=\"display: none\" />'\n  );\n  styleTags: JQuery<HTMLStyleElement>[] = [];\n  $input: JQuery = $('<div id=\"input\"></div>');\n\n  constructor() {\n    $(document.body).append(this.$iframe);\n    this.body.append(this.$input);\n  }\n\n  get body(): JQuery<HTMLBodyElement> {\n    return this.$iframe.contents().find(\"body\");\n  }\n\n  tearDown() {\n    this.$iframe.remove();\n  }\n\n  pullStyleTagsIntoDom(): void {\n    // Get all the style tags in the document\n    const styleTags = this.inputText.match(STYLE_REGEX);\n\n    if (!styleTags) return;\n\n    // Append each style tag to the body of the page.\n    styleTags.forEach((tag) => {\n      const $tag = $<HTMLStyleElement>(tag);\n\n      this.body.append($tag);\n    });\n\n    // Remove the style markup\n    this.inputText = this.inputText.replace(STYLE_REGEX, \"\");\n  }\n\n  stripHeadTag() {\n    // Strip out header tag\n    this.inputText = this.inputText\n      .replace(\"<!DOCTYPE html>\", \"\")\n      .replace(\"<html>\", \"\")\n      .replace(\"</html>\", \"\")\n      .replace(/<head[^>]*>.*<\\/head>/g, \"\")\n      .replace(/<body[^>]*>/, \"\")\n      .replace(\"</body>\", \"\");\n  }\n\n  putInputOntoDom() {\n    this.$input.html(this.inputText);\n  }\n\n  wrapElementWithStyle = (\n    $element: JQuery,\n    property: string,\n    style: string,\n    wrapper: string\n  ) => {\n    if ($element.css(property) === style) {\n      $element.wrap(wrapper);\n    }\n  };\n\n  makeElementSemantic($element: JQuery) {\n    this.wrapElementWithStyle($element, \"font-style\", \"italic\", \"<em></em>\");\n    this.wrapElementWithStyle(\n      $element,\n      \"font-weight\",\n      \"bold\",\n      \"<strong></strong>\"\n    );\n    this.wrapElementWithStyle(\n      $element,\n      \"font-weight\",\n      \"700\",\n      \"<strong></strong>\"\n    );\n    this.wrapElementWithStyle(\n      $element,\n      \"text-decoration\",\n      \"line-through\",\n      \"<s></s>\"\n    );\n    this.wrapElementWithStyle(\n      $element,\n      \"text-decoration\",\n      \"underline\",\n      \"<u></u>\"\n    );\n  }\n\n  makeElementsSemantic() {\n    this.$input.find(\"*\").each((index, element) => {\n      const $element = $(element);\n\n      this.makeElementSemantic($element);\n      $element.removeAttr(\"class\");\n    });\n  }\n\n  getOutputText = (withLineBreaks: boolean): string => {\n    let output = this.$input\n      .html()\n      // remove the spans, since they should all be replaced by semantic tags\n      .replace(/<span[^>]*>/g, \"\")\n      .replace(/<\\/span>/g, \"\");\n\n    if (!withLineBreaks) {\n      output = this.removeLineBreaks(output);\n    }\n\n    return this.cleanHtmlOutput(output);\n  };\n\n  removeLineBreaks = (output: string): string => {\n    return output\n      .replace(EMPTY_P_REGEX, \"\")\n      .replace(EMPTY_DIV_REGEX, \"\")\n      .replace(BR_REGEX, \"\");\n  };\n\n  cleanHtmlOutput(output: string) {\n    return html_beautify(output);\n  }\n\n  cleanUp() {\n    this.body.find(\"style\").remove();\n    this.$input.html(\"\");\n  }\n\n  /** Process and clean incoming HTML. */\n  processInput = (input: string, withLineBreaks: boolean): string => {\n    this.inputText = input;\n\n    if (!this.inputText) {\n      return \"\";\n    }\n\n    this.pullStyleTagsIntoDom();\n    this.stripHeadTag();\n    this.putInputOntoDom();\n    this.makeElementsSemantic();\n\n    const output = this.getOutputText(withLineBreaks);\n\n    this.cleanUp();\n\n    return output;\n  };\n}\n\nconst cleaner = new HtmlCleaner();\n\n/** Take some HTML input, put if in an iframe, process it, and return the cleaned text. */\nexport const processInput = (\n  input: string,\n  withLineBreaks: boolean\n): string => {\n  return cleaner.processInput(input, withLineBreaks);\n};\n","import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Button, ButtonProps } from \"@chakra-ui/react\";\n\nexport interface DropButtonProps extends Omit<ButtonProps, \"onChange\"> {\n  children: React.ReactNode;\n  whenDragging: React.ReactNode;\n  noDrag?: boolean;\n  noClick?: boolean;\n  onChange: (input: string) => void;\n}\n\nexport const DropButton: React.FC<DropButtonProps> = ({\n  children = \"\",\n  whenDragging = \"\",\n  noDrag = false,\n  noClick = false,\n  onChange,\n  ...props\n}) => {\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file: File) => {\n        const reader = new FileReader();\n\n        reader.onload = () => {\n          onChange(reader.result as string);\n        };\n\n        reader.readAsText(file);\n      });\n    },\n    [onChange]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    maxFiles: 1,\n    accept: \".html\",\n    noDrag,\n    noClick,\n  });\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      <Button {...props}>{isDragActive ? whenDragging : children}</Button>\n    </div>\n  );\n};\n","import React, {\n  ChangeEventHandler,\n  useEffect,\n  useState,\n  forwardRef,\n  useRef,\n} from \"react\";\nimport {\n  Box,\n  Grid,\n  Heading,\n  Textarea,\n  TextareaProps,\n  HeadingProps,\n  Flex,\n  Button,\n  useToast,\n  ButtonProps,\n  Checkbox,\n  HStack,\n  Tooltip,\n} from \"@chakra-ui/react\";\n\nimport { processInput } from \"./lib/html-cleaner\";\nimport { DropButton } from \"./Dropzone\";\n\nexport const Inputs: React.FC = () => {\n  const [input, setInput] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const [removeLineBreaks, setRemoveLineBreaks] = useState(true);\n  const outputRef = useRef<HTMLTextAreaElement>(null);\n  const toast = useToast();\n\n  useEffect(() => {\n    const newOutput = processInput(input, !removeLineBreaks);\n    setOutput(newOutput);\n  }, [input, removeLineBreaks]);\n\n  const handleChange: ChangeEventHandler<HTMLTextAreaElement> = (event) => {\n    if (event.target.name === \"input\") {\n      setInput(event.target.value);\n    } else {\n      setOutput(event.target.value);\n    }\n  };\n\n  const handleRemoveLineBreaks: ChangeEventHandler<HTMLInputElement> = (\n    event\n  ) => {\n    setRemoveLineBreaks(event.target.checked);\n  };\n\n  const handleCopy = () => {\n    copyElement(outputRef.current);\n    toast({\n      title: \"Output Copied!\",\n      description: \"You can now paste it wherever.\",\n      status: \"success\",\n      duration: 2000,\n      isClosable: true,\n    });\n  };\n\n  return (\n    <>\n      <Box pb={3}>\n        <DropButton\n          colorScheme=\"purple\"\n          variant=\"outline\"\n          whenDragging=\"Drop your HTML file here!\"\n          isFullWidth\n          onChange={setInput}\n        >\n          Drag HTML files here, or click to open a file picker\n        </DropButton>\n      </Box>\n\n      <Grid as=\"section\" templateColumns=\"repeat(2, 1fr)\" gap={3}>\n        <Box>\n          <Flex justify=\"space-between\" align=\"center\" pb={2}>\n            <InputHeading>Input</InputHeading>\n\n            <SmallButton disabled={!input} onClick={() => setInput(\"\")}>\n              Clear\n            </SmallButton>\n          </Flex>\n\n          <InputTextArea\n            name=\"input\"\n            placeholder=\"You can paste HTML here.\"\n            value={input}\n            onChange={handleChange}\n          />\n        </Box>\n\n        <Box>\n          <Flex justify=\"space-between\" align=\"center\" pb={2}>\n            <HStack>\n              <InputHeading>Clean Output</InputHeading>\n\n              <Tooltip\n                label=\"If checked, remove any extra line breaks between paragraphs.\"\n                hasArrow\n                placement=\"top-start\"\n              >\n                <span tabIndex={0}>\n                  <Checkbox\n                    colorScheme=\"purple\"\n                    isChecked={removeLineBreaks}\n                    onChange={handleRemoveLineBreaks}\n                  >\n                    Remove Line Breaks\n                  </Checkbox>\n                </span>\n              </Tooltip>\n            </HStack>\n\n            <SmallButton disabled={!output} onClick={handleCopy}>\n              Copy\n            </SmallButton>\n          </Flex>\n\n          <InputTextArea\n            placeholder=\"Your clean HTML will show up here.\"\n            name=\"output\"\n            value={output}\n            onChange={handleChange}\n            ref={outputRef}\n          />\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nconst InputHeading: React.FC<HeadingProps> = (props) => {\n  return <Heading as=\"h2\" size=\"md\" {...props}></Heading>;\n};\n\nconst InputTextArea = forwardRef<HTMLTextAreaElement, TextareaProps>(\n  (props, ref) => {\n    return (\n      <Textarea\n        minHeight=\"200px\"\n        fontFamily=\"mono\"\n        fontSize=\"sm\"\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nconst SmallButton: React.FC<ButtonProps> = (props) => {\n  return <Button colorScheme=\"purple\" size=\"xs\" name=\"output\" {...props} />;\n};\n\nconst copyElement = (textarea: HTMLTextAreaElement | null) => {\n  if (!textarea) return;\n\n  textarea.select();\n  textarea.setSelectionRange(0, 99999); /* For mobile devices */\n\n  document.execCommand(\"copy\");\n};\n","import React from \"react\";\nimport { Box, Flex, Container } from \"@chakra-ui/react\";\n\nimport { Docs } from \"./Docs\";\nimport { Nav } from \"./Nav\";\nimport { Footer } from \"./Footer\";\nimport { Inputs } from \"./Inputs\";\n\nexport const Layout: React.FC = () => {\n  return (\n    <Flex height=\"100%\" direction=\"column\" justify=\"space-between\">\n      <Nav />\n      <Box className=\"body\" flex={1} overflow=\"auto\">\n        <Container\n          maxW=\"container.xl\"\n          height=\"100%\"\n          display=\"flex\"\n          paddingY={3}\n          flexDirection=\"column\"\n          justifyContent=\"space-between\"\n        >\n          <Box flex={1}>\n            <Docs />\n          </Box>\n          <Inputs />\n        </Container>\n      </Box>\n      <Footer />\n    </Flex>\n  );\n};\n","import React from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nimport { theme } from \"./lib/theme\";\nimport { Layout } from \"./Layout\";\n\nexport const App: React.FC = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Layout />\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ColorModeScript } from \"@chakra-ui/react\";\n\nimport { App } from \"./App\";\nimport { theme } from \"./lib/theme\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}